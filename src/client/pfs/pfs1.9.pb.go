// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pfs/pfs1.9.proto

package pfs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Op is the set of operations that can be associated with a chunk of data.
type Op int32

const (
	Op_APPEND    Op = 0
	Op_OVERWRITE Op = 1
	Op_DELETE    Op = 2
)

var Op_name = map[int32]string{
	0: "APPEND",
	1: "OVERWRITE",
	2: "DELETE",
}

var Op_value = map[string]int32{
	"APPEND":    0,
	"OVERWRITE": 1,
	"DELETE":    2,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dcba94308c366b04, []int{0}
}

// DataRef is a reference to a chunk of data in an Object.
type DataRef struct {
	Object               *Object    `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Range                *ByteRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DataRef) Reset()         { *m = DataRef{} }
func (m *DataRef) String() string { return proto.CompactTextString(m) }
func (*DataRef) ProtoMessage()    {}
func (*DataRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcba94308c366b04, []int{0}
}
func (m *DataRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRef.Merge(m, src)
}
func (m *DataRef) XXX_Size() int {
	return m.Size()
}
func (m *DataRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRef.DiscardUnknown(m)
}

var xxx_messageInfo_DataRef proto.InternalMessageInfo

func (m *DataRef) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *DataRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type DataRefs struct {
	DataRefs             []*DataRef `protobuf:"bytes,1,rep,name=dataRefs,proto3" json:"dataRefs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DataRefs) Reset()         { *m = DataRefs{} }
func (m *DataRefs) String() string { return proto.CompactTextString(m) }
func (*DataRefs) ProtoMessage()    {}
func (*DataRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcba94308c366b04, []int{1}
}
func (m *DataRefs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRefs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRefs.Merge(m, src)
}
func (m *DataRefs) XXX_Size() int {
	return m.Size()
}
func (m *DataRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRefs.DiscardUnknown(m)
}

var xxx_messageInfo_DataRefs proto.InternalMessageInfo

func (m *DataRefs) GetDataRefs() []*DataRef {
	if m != nil {
		return m.DataRefs
	}
	return nil
}

// DataOp is a chunk of data and an operation associated with that chunk.
// A sequence of DataOps is used in FileNodeProto to represent the state of a file.
type DataOp struct {
	DataRefs             *DataRefs `protobuf:"bytes,1,opt,name=dataRefs,proto3" json:"dataRefs,omitempty"`
	Op                   Op        `protobuf:"varint,2,opt,name=op,proto3,enum=pfs.Op" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DataOp) Reset()         { *m = DataOp{} }
func (m *DataOp) String() string { return proto.CompactTextString(m) }
func (*DataOp) ProtoMessage()    {}
func (*DataOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcba94308c366b04, []int{2}
}
func (m *DataOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataOp.Merge(m, src)
}
func (m *DataOp) XXX_Size() int {
	return m.Size()
}
func (m *DataOp) XXX_DiscardUnknown() {
	xxx_messageInfo_DataOp.DiscardUnknown(m)
}

var xxx_messageInfo_DataOp proto.InternalMessageInfo

func (m *DataOp) GetDataRefs() *DataRefs {
	if m != nil {
		return m.DataRefs
	}
	return nil
}

func (m *DataOp) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_APPEND
}

func init() {
	proto.RegisterEnum("pfs.Op", Op_name, Op_value)
	proto.RegisterType((*DataRef)(nil), "pfs.DataRef")
	proto.RegisterType((*DataRefs)(nil), "pfs.DataRefs")
	proto.RegisterType((*DataOp)(nil), "pfs.DataOp")
}

func init() { proto.RegisterFile("client/pfs/pfs1.9.proto", fileDescriptor_dcba94308c366b04) }

var fileDescriptor_dcba94308c366b04 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2f, 0x48, 0x2b, 0x06, 0x61, 0x43, 0x3d, 0x4b, 0xbd, 0x82, 0xa2, 0xfc, 0x92,
	0x7c, 0x21, 0xe6, 0x82, 0xb4, 0x62, 0x29, 0x11, 0x54, 0x59, 0x88, 0x94, 0x52, 0x08, 0x17, 0xbb,
	0x4b, 0x62, 0x49, 0x62, 0x50, 0x6a, 0x9a, 0x90, 0x32, 0x17, 0x5b, 0x7e, 0x52, 0x56, 0x6a, 0x72,
	0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x11, 0xb7, 0x1e, 0x48, 0x99, 0x3f, 0x58, 0x28, 0x08,
	0x2a, 0x25, 0xa4, 0xc2, 0xc5, 0x5a, 0x94, 0x98, 0x97, 0x9e, 0x2a, 0xc1, 0x04, 0x56, 0xc3, 0x07,
	0x56, 0xe3, 0x54, 0x59, 0x92, 0x1a, 0x04, 0x12, 0x0d, 0x82, 0x48, 0x2a, 0x99, 0x70, 0x71, 0x40,
	0x4d, 0x2d, 0x16, 0xd2, 0xe0, 0xe2, 0x48, 0x81, 0xb2, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d,
	0x78, 0xc0, 0x9a, 0xa0, 0x0a, 0x82, 0xe0, 0xb2, 0x4a, 0x3e, 0x5c, 0x6c, 0x20, 0x41, 0xff, 0x02,
	0x21, 0x4d, 0x14, 0x3d, 0x20, 0x8b, 0x78, 0x91, 0xf5, 0x14, 0x23, 0x34, 0x09, 0x89, 0x73, 0x31,
	0xe5, 0x17, 0x80, 0x5d, 0xc3, 0x67, 0xc4, 0x0e, 0x71, 0x71, 0x41, 0x10, 0x53, 0x7e, 0x81, 0x96,
	0x36, 0x17, 0x93, 0x7f, 0x81, 0x10, 0x17, 0x17, 0x9b, 0x63, 0x40, 0x80, 0xab, 0x9f, 0x8b, 0x00,
	0x83, 0x10, 0x2f, 0x17, 0xa7, 0x7f, 0x98, 0x6b, 0x50, 0x78, 0x90, 0x67, 0x88, 0xab, 0x00, 0x23,
	0x48, 0xca, 0xc5, 0xd5, 0xc7, 0x35, 0xc4, 0x55, 0x80, 0xc9, 0xc9, 0xfe, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x37, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x20, 0x31, 0x39, 0xa3, 0x32, 0x25,
	0xb5, 0x08, 0x99, 0x55, 0x5c, 0x94, 0xac, 0x8f, 0x08, 0xd1, 0x24, 0x36, 0x70, 0x70, 0x1a, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x26, 0x38, 0xdb, 0x84, 0x01, 0x00, 0x00,
}

func (m *DataRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPfs1_9(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Range != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPfs1_9(dAtA, i, uint64(m.Range.Size()))
		n2, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataRefs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRefs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DataRefs) > 0 {
		for _, msg := range m.DataRefs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPfs1_9(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataRefs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPfs1_9(dAtA, i, uint64(m.DataRefs.Size()))
		n3, err := m.DataRefs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Op != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPfs1_9(dAtA, i, uint64(m.Op))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPfs1_9(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DataRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPfs1_9(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovPfs1_9(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataRefs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataRefs) > 0 {
		for _, e := range m.DataRefs {
			l = e.Size()
			n += 1 + l + sovPfs1_9(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataRefs != nil {
		l = m.DataRefs.Size()
		n += 1 + l + sovPfs1_9(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovPfs1_9(uint64(m.Op))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfs1_9(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPfs1_9(x uint64) (n int) {
	return sovPfs1_9(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfs1_9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfs1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfs1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &ByteRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfs1_9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRefs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfs1_9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRefs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRefs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfs1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRefs = append(m.DataRefs, &DataRef{})
			if err := m.DataRefs[len(m.DataRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfs1_9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfs1_9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfs1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRefs == nil {
				m.DataRefs = &DataRefs{}
			}
			if err := m.DataRefs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPfs1_9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfs1_9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfs1_9(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfs1_9
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfs1_9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfs1_9
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPfs1_9
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPfs1_9
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPfs1_9(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPfs1_9
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPfs1_9 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfs1_9   = fmt.Errorf("proto: integer overflow")
)
