// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/pkg/hashtree/hashtree1.9.proto

package hashtree

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/src/client/pfs"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeProto is a node in the hash tree (either a file or a directory)
type NodeProto1_9 struct {
	// Name is the name (not path) of the file/directory (e.g. /lib).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Hash is a hash of the node's name and contents. This can be used to
	// detect if the name or contents have changed between versions.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Subtree_size is the size of the subtree under node; i.e. if this is a directory,
	// subtree_size includes all children.
	SubtreeSize int64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	// Exactly one of the following fields must be set. The type of this node will
	// be determined by which field is set.
	FileNode             *FileNodeProto1_9   `protobuf:"bytes,4,opt,name=file_node,json=fileNode,proto3" json:"file_node,omitempty"`
	DirNode              *DirectoryNodeProto `protobuf:"bytes,5,opt,name=dir_node,json=dirNode,proto3" json:"dir_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NodeProto1_9) Reset()         { *m = NodeProto1_9{} }
func (m *NodeProto1_9) String() string { return proto.CompactTextString(m) }
func (*NodeProto1_9) ProtoMessage()    {}
func (*NodeProto1_9) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d5573f984d34d1, []int{0}
}
func (m *NodeProto1_9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeProto1_9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeProto1_9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeProto1_9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProto1_9.Merge(m, src)
}
func (m *NodeProto1_9) XXX_Size() int {
	return m.Size()
}
func (m *NodeProto1_9) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProto1_9.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProto1_9 proto.InternalMessageInfo

func (m *NodeProto1_9) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeProto1_9) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *NodeProto1_9) GetSubtreeSize() int64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *NodeProto1_9) GetFileNode() *FileNodeProto1_9 {
	if m != nil {
		return m.FileNode
	}
	return nil
}

func (m *NodeProto1_9) GetDirNode() *DirectoryNodeProto {
	if m != nil {
		return m.DirNode
	}
	return nil
}

// FileNodeProto is a node corresponding to a file (which is also a leaf node).
type FileNodeProto1_9 struct {
	// has_header_footer indicates whether the File corresponding to this node
	// inherits header or footer data from the parent directory. Typically this
	// is false, and when it's true, determining this file's contents requires
	// reading the parent directory's metadata in addition to this file's
	// block_refs/objects. Without this signal, all calls to pfs.GetFile() would
	// need to check the parent directory's metadata before beginning to return
	// the file's contents, which would be slow.)
	HasHeaderFooter      bool          `protobuf:"varint,6,opt,name=has_header_footer,json=hasHeaderFooter,proto3" json:"has_header_footer,omitempty"`
	DataOps              []*pfs.DataOp `protobuf:"bytes,7,rep,name=dataOps,proto3" json:"dataOps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FileNodeProto1_9) Reset()         { *m = FileNodeProto1_9{} }
func (m *FileNodeProto1_9) String() string { return proto.CompactTextString(m) }
func (*FileNodeProto1_9) ProtoMessage()    {}
func (*FileNodeProto1_9) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d5573f984d34d1, []int{1}
}
func (m *FileNodeProto1_9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileNodeProto1_9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileNodeProto1_9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileNodeProto1_9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileNodeProto1_9.Merge(m, src)
}
func (m *FileNodeProto1_9) XXX_Size() int {
	return m.Size()
}
func (m *FileNodeProto1_9) XXX_DiscardUnknown() {
	xxx_messageInfo_FileNodeProto1_9.DiscardUnknown(m)
}

var xxx_messageInfo_FileNodeProto1_9 proto.InternalMessageInfo

func (m *FileNodeProto1_9) GetHasHeaderFooter() bool {
	if m != nil {
		return m.HasHeaderFooter
	}
	return false
}

func (m *FileNodeProto1_9) GetDataOps() []*pfs.DataOp {
	if m != nil {
		return m.DataOps
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeProto1_9)(nil), "hashtree.NodeProto1_9")
	proto.RegisterType((*FileNodeProto1_9)(nil), "hashtree.FileNodeProto1_9")
}

func init() {
	proto.RegisterFile("server/pkg/hashtree/hashtree1.9.proto", fileDescriptor_e7d5573f984d34d1)
}

var fileDescriptor_e7d5573f984d34d1 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x26, 0xb6, 0xe9, 0xa6, 0x60, 0xdc, 0x8b, 0xa1, 0x48, 0x88, 0x85, 0x42, 0xf0,
	0x90, 0xd0, 0x0a, 0x96, 0x5e, 0xa5, 0x94, 0xd2, 0x83, 0x4a, 0xbc, 0x79, 0x09, 0xdb, 0x64, 0xd2,
	0x2c, 0xb6, 0xdd, 0xb0, 0x9b, 0x2a, 0xed, 0x93, 0xf8, 0x48, 0x82, 0x17, 0x1f, 0x41, 0xea, 0x8b,
	0x48, 0xd2, 0x36, 0x16, 0x11, 0x0f, 0x0b, 0xff, 0x7c, 0x3b, 0xdf, 0xcc, 0x61, 0x70, 0x5b, 0x82,
	0x78, 0x06, 0xe1, 0xa5, 0x4f, 0x53, 0x2f, 0xa1, 0x32, 0xc9, 0x04, 0x40, 0x19, 0x3a, 0x6e, 0xdf,
	0x4d, 0x05, 0xcf, 0x38, 0xd1, 0xf6, 0xa8, 0x79, 0x16, 0xce, 0x18, 0x2c, 0x32, 0x2f, 0x8d, 0x65,
	0xfe, 0xca, 0x96, 0x66, 0xeb, 0xbf, 0x49, 0xdb, 0x9e, 0xd6, 0x3b, 0xc2, 0x8d, 0x5b, 0x1e, 0xc1,
	0x7d, 0x5e, 0x75, 0x82, 0x3e, 0x21, 0x58, 0x5d, 0xd0, 0x39, 0x98, 0xc8, 0x46, 0x4e, 0xdd, 0x2f,
	0x72, 0xce, 0x72, 0xcd, 0xac, 0xd8, 0xc8, 0x69, 0xf8, 0x45, 0x26, 0x17, 0xb8, 0x21, 0x97, 0x93,
	0x7c, 0x52, 0x20, 0xd9, 0x1a, 0x4c, 0xc5, 0x46, 0x8e, 0xe2, 0xeb, 0x3b, 0xf6, 0xc0, 0xd6, 0x40,
	0x7a, 0xb8, 0x1e, 0xb3, 0x19, 0x04, 0x0b, 0x1e, 0x81, 0xa9, 0xda, 0xc8, 0xd1, 0xbb, 0x4d, 0xb7,
	0xdc, 0x3f, 0x64, 0x33, 0x38, 0xdc, 0xec, 0x6b, 0xf1, 0x8e, 0x90, 0x1e, 0xd6, 0x22, 0x26, 0xb6,
	0xde, 0x71, 0xe1, 0x9d, 0xff, 0x78, 0x03, 0x26, 0x20, 0xcc, 0xb8, 0x58, 0x95, 0xb2, 0x5f, 0x8b,
	0x98, 0xc8, 0xab, 0xd6, 0x0b, 0x36, 0x7e, 0x8f, 0x25, 0x97, 0xf8, 0x34, 0xa1, 0x32, 0x48, 0x80,
	0x46, 0x20, 0x82, 0x98, 0xf3, 0x0c, 0x84, 0x59, 0xb5, 0x91, 0xa3, 0xf9, 0x27, 0x09, 0x95, 0xa3,
	0x82, 0x0f, 0x0b, 0x4c, 0xda, 0xb8, 0x16, 0xd1, 0x8c, 0xde, 0xa5, 0xd2, 0xac, 0xd9, 0x8a, 0xa3,
	0x77, 0x75, 0x37, 0x8d, 0xa5, 0x3b, 0x28, 0x98, 0xbf, 0xff, 0x1b, 0xab, 0x1a, 0x32, 0x2a, 0x63,
	0x55, 0xab, 0x18, 0xca, 0x58, 0xd5, 0x14, 0x43, 0xbd, 0x19, 0xbd, 0x6d, 0x2c, 0xf4, 0xb1, 0xb1,
	0xd0, 0xe7, 0xc6, 0x42, 0xaf, 0x5f, 0xd6, 0xd1, 0xe3, 0xf5, 0x94, 0x65, 0xc9, 0x72, 0xe2, 0x86,
	0x7c, 0xee, 0xa5, 0x34, 0x4c, 0x56, 0x11, 0x88, 0xc3, 0x24, 0x45, 0xe8, 0xfd, 0x71, 0x9f, 0x49,
	0xb5, 0xb8, 0xcb, 0xd5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x85, 0x76, 0xb7, 0x07, 0x02,
	0x00, 0x00,
}

func (m *NodeProto1_9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeProto1_9) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHashtree1_9(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHashtree1_9(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.SubtreeSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHashtree1_9(dAtA, i, uint64(m.SubtreeSize))
	}
	if m.FileNode != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHashtree1_9(dAtA, i, uint64(m.FileNode.Size()))
		n1, err := m.FileNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DirNode != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHashtree1_9(dAtA, i, uint64(m.DirNode.Size()))
		n2, err := m.DirNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileNodeProto1_9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileNodeProto1_9) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasHeaderFooter {
		dAtA[i] = 0x30
		i++
		if m.HasHeaderFooter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DataOps) > 0 {
		for _, msg := range m.DataOps {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintHashtree1_9(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHashtree1_9(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeProto1_9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHashtree1_9(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovHashtree1_9(uint64(l))
	}
	if m.SubtreeSize != 0 {
		n += 1 + sovHashtree1_9(uint64(m.SubtreeSize))
	}
	if m.FileNode != nil {
		l = m.FileNode.Size()
		n += 1 + l + sovHashtree1_9(uint64(l))
	}
	if m.DirNode != nil {
		l = m.DirNode.Size()
		n += 1 + l + sovHashtree1_9(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileNodeProto1_9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasHeaderFooter {
		n += 2
	}
	if len(m.DataOps) > 0 {
		for _, e := range m.DataOps {
			l = e.Size()
			n += 1 + l + sovHashtree1_9(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHashtree1_9(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHashtree1_9(x uint64) (n int) {
	return sovHashtree1_9(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeProto1_9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashtree1_9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeProto1_9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeProto1_9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			m.SubtreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileNode == nil {
				m.FileNode = &FileNodeProto1_9{}
			}
			if err := m.FileNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirNode == nil {
				m.DirNode = &DirectoryNodeProto{}
			}
			if err := m.DirNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHashtree1_9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileNodeProto1_9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashtree1_9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileNodeProto1_9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileNodeProto1_9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasHeaderFooter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasHeaderFooter = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataOps = append(m.DataOps, &pfs.DataOp{})
			if err := m.DataOps[len(m.DataOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHashtree1_9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHashtree1_9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHashtree1_9(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHashtree1_9
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashtree1_9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHashtree1_9
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHashtree1_9
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHashtree1_9
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHashtree1_9(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHashtree1_9
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHashtree1_9 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHashtree1_9   = fmt.Errorf("proto: integer overflow")
)
